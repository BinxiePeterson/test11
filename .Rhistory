library(renv)
renv::init()
install.packages(c("palmerpenguins", "dplyr", "ggplot2"))
renv::snapshot()
reticulate::repl_python()
install.packages("reticulate")
install.packages(c("DBI", "dbplyr", "duckdb"))
install.packages(c("DBI", "dbplyr", "duckdb"))
install.packages(c("DBI", "dbplyr"))
install.packages(c("duckdb"))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
# Make a persistent DB and store the connection in a variable.
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
# Write an R dataframe (penguins) into a DuckDB table.
DBI::dbWriteTable(conn = con,
name = "penguins",
value = palmerpenguins::penguins,
overwrite = TRUE)
# Disconnect from the database.
DBI::dbDisconnect(con, shutdown = TRUE)
library(dbplyr)
# Make a persistent DB and store the connection in a variable.
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
# Query the data in the database.
df <- dplyr::tbl(con, "penguins")
# Summarise the data and extract (collect) the data as a dataframe.
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
# Disconnect from the database.
DBI::dbDisconnect(con, shutdown = TRUE)
df %>%
dplyr::collect() %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
dplyr::collect()
df
df
install.packages("httr2")
reticulate::repl_python()
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
res <- httr2::resp_body_json(req)$predict[[1]]
reticulate::repl_python()
reticulate::repl_python()
library(shiny)
api_url <- "http://127.0.0.1:8080/predict"
ui <- fluidPage(
titlePanel("Penguin Mass Predictor"),
# Model input values
sidebarLayout(
sidebarPanel(
sliderInput(
"bill_length",
"Bill Length (mm)",
min = 30,
max = 60,
value = 45,
step = 0.1
),
selectInput(
"sex",
"Sex",
c("Male", "Female")
),
selectInput(
"species",
"Species",
c("Adelie", "Chinstrap", "Gentoo")
),
# Get model predictions
actionButton(
"predict",
"Predict"
)
),
mainPanel(
h2("Penguin Parameters"),
verbatimTextOutput("vals"),
h2("Predicted Penguin Mass (g)"),
textOutput("pred")
)
)
)
server <- function(input, output) {
# Input params
vals <- reactive(
list(
bill_length_mm = input$bill_length,
species_Chinstrap = input$species == "Chinstrap",
species_Gentoo = input$species == "Gentoo",
sex_male = input$sex == "Male"
)
)
# Fetch prediction from API
pred <- eventReactive(
input$predict,
httr2::request(api_url) |>
httr2::req_body_json(list(vals())) |>
httr2::req_perform() |>
httr2::resp_body_json(),
ignoreInit = TRUE
)
# Render to UI
output$pred <- renderText(pred()$predict[[1]])
output$vals <- renderPrint(vals())
}
# Run the application
shinyApp(ui = ui, server = server)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
